// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RebelTask.DataAccess.Models;

namespace RebelTask.DataAccess.Migrations
{
    [DbContext(typeof(RebelTasksContext))]
    partial class RebelTasksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RebelTask.DataAccess.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Yazılım kod geliştirme departmanı",
                            Name = "Yazılım"
                        },
                        new
                        {
                            Id = 2,
                            Description = "iş analiz ve genel tasarım",
                            Name = "Proje Analiz"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Arayüz ve görsel tasarım departmanı",
                            Name = "Grafik ve Arayüz"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Yöneticiler Departmanı",
                            Name = "Yönetim"
                        });
                });

            modelBuilder.Entity("RebelTask.DataAccess.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FirstName = "Jason",
                            HireDate = new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Statham",
                            Title = "Yazılım geliştirici"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FirstName = "Arnold",
                            HireDate = new DateTime(2015, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Swatcz",
                            Title = "Yazılım geliştirici"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            FirstName = "Bruce",
                            HireDate = new DateTime(2014, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Wayne",
                            LeaveDate = new DateTime(2014, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım geliştirici"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 2,
                            FirstName = "Bryy",
                            HireDate = new DateTime(2014, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Allan",
                            Title = "İş analisti"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            FirstName = "Mark",
                            HireDate = new DateTime(2014, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Buffalo",
                            LeaveDate = new DateTime(2015, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "İş analisti"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 3,
                            FirstName = "Elvis",
                            HireDate = new DateTime(2018, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Presley",
                            Title = "Grafik tasarımc"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 4,
                            FirstName = "Freddie",
                            HireDate = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Mercury",
                            Title = "Proje Yöneticisi"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 4,
                            FirstName = "Alan",
                            HireDate = new DateTime(2011, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Walker",
                            Title = "Ar-ge yöneticisi"
                        });
                });

            modelBuilder.Entity("RebelTask.DataAccess.Models.Employee", b =>
                {
                    b.HasOne("RebelTask.DataAccess.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });
#pragma warning restore 612, 618
        }
    }
}
